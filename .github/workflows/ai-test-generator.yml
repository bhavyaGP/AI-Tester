name: AI Test Generator CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80

jobs:
  test-generator:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git diff analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Verify environment
      run: |
        node --version
        npm --version
        git --version
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"

    - name: Run health check
      run: node sripts/health-check.js

    - name: Generate tests
      env:
        GEMINI_API: ${{ secrets.GEMINI_API_KEY }}
        NODE_ENV: production
        LOG_LEVEL: info
        MAX_CONCURRENT_FILES: 2
        COVERAGE_STATEMENTS: ${{ env.COVERAGE_THRESHOLD }}
        COVERAGE_BRANCHES: 75
        COVERAGE_FUNCTIONS: 85
        CI: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node sripts/ai-test-generator-main.js --verbose

    - name: Run generated tests
      run: |
        npm test
        npm run test:coverage

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ github.run_id }}
        path: |
          coverage/
          reports/
        retention-days: 30

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ github.run_id }}
        path: logs/
        retention-days: 7

    - name: Generate coverage summary
      id: coverage
      run: |
        # Extract coverage data for PR comment
        if [ -f "coverage/coverage-final.json" ]; then
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
            let totalStatements = 0, coveredStatements = 0;
            let totalFunctions = 0, coveredFunctions = 0;
            let totalBranches = 0, coveredBranches = 0;
            let totalLines = 0, coveredLines = 0;
            
            Object.values(coverage).forEach(file => {
              if (file.s) {
                Object.values(file.s).forEach(count => {
                  totalStatements++;
                  if (count > 0) coveredStatements++;
                });
              }
              if (file.f) {
                Object.values(file.f).forEach(count => {
                  totalFunctions++;
                  if (count > 0) coveredFunctions++;
                });
              }
              if (file.b) {
                Object.values(file.b).forEach(branches => {
                  branches.forEach(count => {
                    totalBranches++;
                    if (count > 0) coveredBranches++;
                  });
                });
              }
            });
            
            const stmtPct = totalStatements ? (coveredStatements / totalStatements * 100).toFixed(2) : 0;
            const funcPct = totalFunctions ? (coveredFunctions / totalFunctions * 100).toFixed(2) : 0;
            const branchPct = totalBranches ? (coveredBranches / totalBranches * 100).toFixed(2) : 0;
            const overall = (parseFloat(stmtPct) + parseFloat(funcPct) + parseFloat(branchPct)) / 3;
            
            console.log('COVERAGE_STATEMENTS=' + stmtPct);
            console.log('COVERAGE_FUNCTIONS=' + funcPct);
            console.log('COVERAGE_BRANCHES=' + branchPct);
            console.log('COVERAGE_OVERALL=' + overall.toFixed(2));
          " >> $GITHUB_OUTPUT
        fi

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          
          // Read coverage data
          const stmtCov = '${{ steps.coverage.outputs.COVERAGE_STATEMENTS }}' || '0';
          const funcCov = '${{ steps.coverage.outputs.COVERAGE_FUNCTIONS }}' || '0';
          const branchCov = '${{ steps.coverage.outputs.COVERAGE_BRANCHES }}' || '0';
          const overallCov = '${{ steps.coverage.outputs.COVERAGE_OVERALL }}' || '0';
          
          const threshold = ${{ env.COVERAGE_THRESHOLD }};
          const passed = parseFloat(overallCov) >= threshold;
          
          const statusEmoji = passed ? '‚úÖ' : '‚ùå';
          const statusText = passed ? 'PASSED' : 'FAILED';
          
          const comment = `## ${statusEmoji} AI Test Generator Results
          
          **Status:** ${statusText} (Threshold: ${threshold}%)
          
          ### Coverage Report
          | Metric | Coverage | Status |
          |--------|----------|--------|
          | Statements | ${stmtCov}% | ${parseFloat(stmtCov) >= threshold ? '‚úÖ' : '‚ùå'} |
          | Functions | ${funcCov}% | ${parseFloat(funcCov) >= threshold ? '‚úÖ' : '‚ùå'} |
          | Branches | ${branchCov}% | ${parseFloat(branchCov) >= threshold ? '‚úÖ' : '‚ùå'} |
          | **Overall** | **${overallCov}%** | **${passed ? '‚úÖ' : '‚ùå'}** |
          
          ### Artifacts
          - üìä [Coverage Report](../actions/runs/${{ github.run_id }})
          - üìù [Detailed Logs](../actions/runs/${{ github.run_id }})
          
          <details>
          <summary>üìã Workflow Details</summary>
          
          - **Commit:** \`${{ github.sha }}\`
          - **Branch:** \`${{ github.ref_name }}\`
          - **Workflow:** [${{ github.run_id }}](../actions/runs/${{ github.run_id }})
          - **Timestamp:** ${new Date().toISOString()}
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Update status check
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const overallCov = '${{ steps.coverage.outputs.COVERAGE_OVERALL }}' || '0';
          const threshold = ${{ env.COVERAGE_THRESHOLD }};
          const passed = parseFloat(overallCov) >= threshold;
          
          const state = passed ? 'success' : 'failure';
          const description = `Coverage: ${overallCov}% (threshold: ${threshold}%)`;
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            description: description,
            context: 'AI Test Generator'
          });

    - name: Fail if coverage below threshold
      if: env.FAIL_ON_COVERAGE != 'false'
      run: |
        OVERALL_COV="${{ steps.coverage.outputs.COVERAGE_OVERALL }}"
        if [ $(echo "$OVERALL_COV < $COVERAGE_THRESHOLD" | bc -l) -eq 1 ]; then
          echo "‚ùå Coverage $OVERALL_COV% is below threshold $COVERAGE_THRESHOLD%"
          exit 1
        else
          echo "‚úÖ Coverage $OVERALL_COV% meets threshold $COVERAGE_THRESHOLD%"
        fi

    - name: Send Slack notification
      if: always() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        STATUS="${{ job.status }}"
        OVERALL_COV="${{ steps.coverage.outputs.COVERAGE_OVERALL }}"
        
        if [ "$STATUS" = "success" ]; then
          EMOJI=":white_check_mark:"
          COLOR="good"
        else
          EMOJI=":x:"
          COLOR="danger"
        fi
        
        PAYLOAD=$(cat <<EOF
        {
          "attachments": [
            {
              "color": "$COLOR",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "$EMOJI AI Test Generator - $STATUS"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Coverage:*\n${OVERALL_COV}%"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
          ]
        }
        EOF
        )
        
        curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"

  docker-build:
    runs-on: ubuntu-latest
    needs: test-generator
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ai-test-generator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level moderate
        npm audit fix --dry-run
