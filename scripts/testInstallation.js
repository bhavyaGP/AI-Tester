import { DependencyAnalyzer } from "./tools/dependencyAnalyzer.js";

async function testInstallation() {
  console.log("üß™ Testing Automatic Package Installation...\n");
  
  try {
    const analyzer = new DependencyAnalyzer();
    
    // Analyze current state
    console.log("1Ô∏è‚É£ Analyzing current dependencies...");
    const analysis = await analyzer.analyzeProject();
    
    console.log(`üìä Found ${analysis.missingPackages.length} missing packages`);
    
    if (analysis.missingPackages.length > 0) {
      console.log("\nüì• Missing packages to install:");
      analysis.missingPackages.forEach(pkg => {
        console.log(`  - ${pkg.name} (${pkg.type})`);
      });
      
      console.log("\n2Ô∏è‚É£ Starting automatic installation...");
      const installSuccess = await analyzer.installMissingPackages();
      
      if (installSuccess) {
        console.log("\n‚úÖ Installation completed successfully!");
        
        // Verify installation
        console.log("\n3Ô∏è‚É£ Verifying installation...");
        const newAnalysis = await analyzer.analyzeProject();
        
        console.log(`üìä Missing packages after installation: ${newAnalysis.missingPackages.length}`);
        
        if (newAnalysis.missingPackages.length === 0) {
          console.log("üéâ All dependencies now satisfied!");
        } else {
          console.log("‚ö†Ô∏è Some packages still missing:");
          newAnalysis.missingPackages.forEach(pkg => {
            console.log(`  - ${pkg.name} (${pkg.type})`);
          });
        }
      } else {
        console.log("‚ùå Installation failed");
      }
    } else {
      console.log("‚úÖ No missing packages - all dependencies already satisfied!");
    }
    
  } catch (error) {
    console.error("‚ùå Installation test failed:", error.message);
    console.error(error.stack);
  }
}

// Run the test
testInstallation();